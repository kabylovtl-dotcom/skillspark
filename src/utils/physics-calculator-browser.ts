// Browser-compatible physics calculator without MCP
export interface PhysicsCalculation {
  type: 'force' | 'velocity' | 'kinetic-energy' | 'gravitational-force' | 'ohms-law';
  params: any;
  result?: string;
  error?: string;
}

export class PhysicsCalculator {
  // Parse physics questions and extract parameters
  static parsePhysicsQuestion(question: string): PhysicsCalculation | null {
    const lowerQuestion = question.toLowerCase();

    // Force calculation: F = ma
    const forceMatch = lowerQuestion.match(/(?:force|—Å–∏–ª–∞).*(?:mass|–º–∞—Å—Å–∞).*?(\d+(?:\.\d+)?).*(?:acceleration|—É—Å–∫–æ—Ä–µ–Ω–∏–µ).*?(\d+(?:\.\d+)?)/);
    if (forceMatch) {
      return {
        type: 'force',
        params: {
          mass: parseFloat(forceMatch[1]),
          acceleration: parseFloat(forceMatch[2])
        }
      };
    }

    // Velocity calculation: v = u + at
    const velocityMatch = lowerQuestion.match(/(?:velocity|—Å–∫–æ—Ä–æ—Å—Ç—å).*(?:initial|–Ω–∞—á–∞–ª—å–Ω–∞—è).*?(\d+(?:\.\d+)?).*(?:acceleration|—É—Å–∫–æ—Ä–µ–Ω–∏–µ).*?(\d+(?:\.\d+)?).*(?:time|–≤—Ä–µ–º—è).*?(\d+(?:\.\d+)?)/);
    if (velocityMatch) {
      return {
        type: 'velocity',
        params: {
          initialVelocity: parseFloat(velocityMatch[1]),
          acceleration: parseFloat(velocityMatch[2]),
          time: parseFloat(velocityMatch[3])
        }
      };
    }

    // Kinetic energy: KE = ¬Ωmv¬≤
    const kineticMatch = lowerQuestion.match(/(?:kinetic energy|–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è).*(?:mass|–º–∞—Å—Å–∞).*?(\d+(?:\.\d+)?).*(?:velocity|—Å–∫–æ—Ä–æ—Å—Ç—å).*?(\d+(?:\.\d+)?)/);
    if (kineticMatch) {
      return {
        type: 'kinetic-energy',
        params: {
          mass: parseFloat(kineticMatch[1]),
          velocity: parseFloat(kineticMatch[2])
        }
      };
    }

    // Gravitational force: F = G(m‚ÇÅm‚ÇÇ)/r¬≤
    const gravityMatch = lowerQuestion.match(/(?:gravitational|–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è).*(?:force|—Å–∏–ª–∞).*(?:mass|–º–∞—Å—Å–∞).*?(\d+(?:\.\d+)?).*(?:mass|–º–∞—Å—Å–∞).*?(\d+(?:\.\d+)?).*(?:distance|—Ä–∞—Å—Å—Ç–æ—è–Ω–∏–µ).*?(\d+(?:\.\d+)?)/);
    if (gravityMatch) {
      return {
        type: 'gravitational-force',
        params: {
          mass1: parseFloat(gravityMatch[1]),
          mass2: parseFloat(gravityMatch[2]),
          distance: parseFloat(gravityMatch[3])
        }
      };
    }

    // Ohm's Law: V = IR, I = V/R, R = V/I
    const ohmsMatch = lowerQuestion.match(/(?:ohm|–æ–º).*(?:law|–∑–∞–∫–æ–Ω).*(?:voltage|–Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ).*?(\d+(?:\.\d+)?).*(?:current|—Ç–æ–∫).*?(\d+(?:\.\d+)?)/);
    if (ohmsMatch) {
      return {
        type: 'ohms-law',
        params: {
          voltage: parseFloat(ohmsMatch[1]),
          current: parseFloat(ohmsMatch[2])
        }
      };
    }

    return null;
  }

  // Execute physics calculation
  async calculate(calculation: PhysicsCalculation): Promise<string> {
    try {
      switch (calculation.type) {
        case 'force':
          return this.calculateForce(
            calculation.params.mass,
            calculation.params.acceleration
          );

        case 'velocity':
          return this.calculateVelocity(
            calculation.params.initialVelocity,
            calculation.params.acceleration,
            calculation.params.time
          );

        case 'kinetic-energy':
          return this.calculateKineticEnergy(
            calculation.params.mass,
            calculation.params.velocity
          );

        case 'gravitational-force':
          return this.calculateGravitationalForce(
            calculation.params.mass1,
            calculation.params.mass2,
            calculation.params.distance
          );

        case 'ohms-law':
          return this.calculateOhmsLaw(calculation.params);

        default:
          return "‚ùå Unknown calculation type";
      }
    } catch (error) {
      console.error('Physics calculation error:', error);
      return `‚ùå Calculation error: ${error instanceof Error ? error.message : 'Unknown error'}`;
    }
  }

  // Force calculation: F = ma
  private calculateForce(mass: number, acceleration: number): string {
    const force = mass * acceleration;
    return `üî¨ Force Calculation:\n\nF = ma\nF = ${mass} kg √ó ${acceleration} m/s¬≤\nF = ${force} N\n\nForce = ${force} Newtons`;
  }

  // Velocity calculation: v = u + at
  private calculateVelocity(initialVelocity: number, acceleration: number, time: number): string {
    const finalVelocity = initialVelocity + (acceleration * time);
    return `üèÉ Velocity Calculation:\n\nv = u + at\nv = ${initialVelocity} m/s + (${acceleration} m/s¬≤ √ó ${time} s)\nv = ${initialVelocity} + ${acceleration * time}\nv = ${finalVelocity} m/s\n\nFinal velocity = ${finalVelocity} m/s`;
  }

  // Kinetic energy: KE = ¬Ωmv¬≤
  private calculateKineticEnergy(mass: number, velocity: number): string {
    const kineticEnergy = 0.5 * mass * velocity * velocity;
    return `‚ö° Kinetic Energy Calculation:\n\nKE = ¬Ωmv¬≤\nKE = ¬Ω √ó ${mass} kg √ó (${velocity} m/s)¬≤\nKE = 0.5 √ó ${mass} √ó ${velocity * velocity}\nKE = ${kineticEnergy} J\n\nKinetic Energy = ${kineticEnergy} Joules`;
  }

  // Gravitational force: F = G(m‚ÇÅm‚ÇÇ)/r¬≤
  private calculateGravitationalForce(mass1: number, mass2: number, distance: number): string {
    const G = 6.67430e-11; // Gravitational constant
    const force = (G * mass1 * mass2) / (distance * distance);
    return `üåç Gravitational Force Calculation:\n\nF = G(m‚ÇÅm‚ÇÇ)/r¬≤\nF = ${G} √ó (${mass1} kg √ó ${mass2} kg) / (${distance} m)¬≤\nF = ${G} √ó ${mass1 * mass2} / ${distance * distance}\nF = ${force} N\n\nGravitational Force = ${force} Newtons`;
  }

  // Ohm's Law: V = IR, I = V/R, R = V/I
  private calculateOhmsLaw(params: { voltage?: number; current?: number; resistance?: number }): string {
    const { voltage, current, resistance } = params;
    
    if (voltage && current && !resistance) {
      // Calculate resistance: R = V/I
      const calculatedResistance = voltage / current;
      return `üîå Resistance Calculation (Ohm's Law):\n\nR = V/I\nR = ${voltage} V / ${current} A\nR = ${calculatedResistance} Œ©\n\nResistance = ${calculatedResistance} Ohms`;
    } else if (voltage && resistance && !current) {
      // Calculate current: I = V/R
      const calculatedCurrent = voltage / resistance;
      return `‚ö° Current Calculation (Ohm's Law):\n\nI = V/R\nI = ${voltage} V / ${resistance} Œ©\nI = ${calculatedCurrent} A\n\nCurrent = ${calculatedCurrent} Amperes`;
    } else if (current && resistance && !voltage) {
      // Calculate voltage: V = IR
      const calculatedVoltage = current * resistance;
      return `üîã Voltage Calculation (Ohm's Law):\n\nV = I √ó R\nV = ${current} A √ó ${resistance} Œ©\nV = ${calculatedVoltage} V\n\nVoltage = ${calculatedVoltage} Volts`;
    } else {
      return `‚ùå Please provide exactly 2 values to calculate the third using Ohm's Law.\n\nAvailable calculations:\n‚Ä¢ R = V/I (calculate resistance)\n‚Ä¢ I = V/R (calculate current)\n‚Ä¢ V = I √ó R (calculate voltage)`;
    }
  }

  // Get physics resources
  async getPhysicsResource(type: 'newtons-laws' | 'kinematic-equations'): Promise<string> {
    switch (type) {
      case 'newtons-laws':
        return `üìö Newton's Laws of Motion:

1Ô∏è‚É£ First Law (Law of Inertia):
   "An object at rest stays at rest, and an object in motion stays in motion, unless acted upon by an external force."
   Formula: F = 0 ‚Üí v = constant

2Ô∏è‚É£ Second Law (Force and Acceleration):
   "Force equals mass times acceleration."
   Formula: F = ma
   
3Ô∏è‚É£ Third Law (Action and Reaction):
   "For every action, there is an equal and opposite reaction."
   Formula: F‚ÇÅ = -F‚ÇÇ

üí° Applications:
‚Ä¢ Car safety (seatbelts, airbags)
‚Ä¢ Rocket propulsion
‚Ä¢ Sports physics
‚Ä¢ Everyday motion`;

      case 'kinematic-equations':
        return `üèÉ Kinematic Equations:

1Ô∏è‚É£ v = u + at
   (Final velocity = Initial velocity + acceleration √ó time)

2Ô∏è‚É£ s = ut + ¬Ωat¬≤
   (Displacement = Initial velocity √ó time + ¬Ω √ó acceleration √ó time¬≤)

3Ô∏è‚É£ v¬≤ = u¬≤ + 2as
   (Final velocity¬≤ = Initial velocity¬≤ + 2 √ó acceleration √ó displacement)

4Ô∏è‚É£ s = ¬Ω(u + v)t
   (Displacement = ¬Ω √ó (Initial velocity + Final velocity) √ó time)

Where:
‚Ä¢ v = final velocity (m/s)
‚Ä¢ u = initial velocity (m/s)
‚Ä¢ a = acceleration (m/s¬≤)
‚Ä¢ t = time (s)
‚Ä¢ s = displacement (m)`;

      default:
        return "‚ùå Unknown resource type";
    }
  }

  // Check if question contains physics calculations
  static isPhysicsQuestion(question: string): boolean {
    const physicsKeywords = [
      'force', '—Å–∏–ª–∞', '–º–∞—Å—Å–∞', 'mass', 'acceleration', '—É—Å–∫–æ—Ä–µ–Ω–∏–µ',
      'velocity', '—Å–∫–æ—Ä–æ—Å—Ç—å', 'kinetic energy', '–∫–∏–Ω–µ—Ç–∏—á–µ—Å–∫–∞—è —ç–Ω–µ—Ä–≥–∏—è',
      'gravitational', '–≥—Ä–∞–≤–∏—Ç–∞—Ü–∏–æ–Ω–Ω–∞—è', 'ohm', '–æ–º', 'law', '–∑–∞–∫–æ–Ω',
      'newton', '–Ω—å—é—Ç–æ–Ω', '—Ñ–∏–∑–∏–∫–∞', 'physics', '—Ä–∞—Å—á–µ—Ç', 'calculate'
    ];

    const lowerQuestion = question.toLowerCase();
    return physicsKeywords.some(keyword => lowerQuestion.includes(keyword));
  }

  // Get available tools (for compatibility)
  async getAvailableTools(): Promise<any[]> {
    return [
      { name: 'calculate-force', description: 'Calculate force using F = ma' },
      { name: 'calculate-velocity', description: 'Calculate velocity using v = u + at' },
      { name: 'calculate-kinetic-energy', description: 'Calculate kinetic energy using KE = ¬Ωmv¬≤' },
      { name: 'calculate-gravitational-force', description: 'Calculate gravitational force using F = G(m‚ÇÅm‚ÇÇ)/r¬≤' },
      { name: 'calculate-ohms-law', description: 'Calculate voltage, current, or resistance using Ohm\'s Law' }
    ];
  }
}

export const physicsCalculator = new PhysicsCalculator();

